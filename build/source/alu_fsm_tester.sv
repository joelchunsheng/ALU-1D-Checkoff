/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_fsm_tester (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam E_States_IDLE = 3'h0;
    localparam E_States_LOAD_A = 3'h1;
    localparam E_States_LOAD_B = 3'h2;
    localparam E_States_LOAD_OPC = 3'h3;
    localparam E_States_EXECUTE = 3'h4;
    localparam E_States_CHECK = 3'h5;
    localparam E_Manual_IDLE = 3'h0;
    localparam E_Manual_LOAD_A_FIRST = 3'h1;
    localparam E_Manual_LOAD_A_SECOND = 3'h2;
    localparam E_Manual_LOAD_B_FIRST = 3'h3;
    localparam E_Manual_LOAD_B_SECOND = 3'h4;
    localparam E_Manual_LOAD_OPC = 3'h5;
    localparam E_Manual_EXECUTE_FIRST = 3'h6;
    localparam E_Manual_EXECUTE_SECOND = 3'h7;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1c;
    localparam CLK_FREQ1 = 24'h989680;
    logic [4:0] M_alu_test_rom_a_addr;
    logic [31:0] M_alu_test_rom_a_data;
    
    alu_test_rom_a alu_test_rom_a (
        .addr(M_alu_test_rom_a_addr),
        .data(M_alu_test_rom_a_data)
    );
    
    
    logic [4:0] M_alu_test_rom_b_addr;
    logic [31:0] M_alu_test_rom_b_data;
    
    alu_test_rom_b alu_test_rom_b (
        .addr(M_alu_test_rom_b_addr),
        .data(M_alu_test_rom_b_data)
    );
    
    
    logic [4:0] M_alu_test_rom_alufn_addr;
    logic [5:0] M_alu_test_rom_alufn_data;
    
    alu_test_rom_alufn alu_test_rom_alufn (
        .addr(M_alu_test_rom_alufn_addr),
        .data(M_alu_test_rom_alufn_data)
    );
    
    
    logic [4:0] M_alu_test_rom_expected_result_addr;
    logic [31:0] M_alu_test_rom_expected_result_data;
    
    alu_test_rom_expected_result alu_test_rom_expected_result (
        .addr(M_alu_test_rom_expected_result_addr),
        .data(M_alu_test_rom_expected_result_data)
    );
    
    
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    logic [4:0] rom_addr;
    logic slow_clock;
    logic flipped;
    localparam logic [4:0][0:0] _MP_RISE_769823641 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_769823641 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_769823641;
    
    generate
        for (idx_0_769823641 = 0; idx_0_769823641 < 5; idx_0_769823641 = idx_0_769823641 + 1) begin: forLoop_idx_0_769823641
            edge_detector #(
                .RISE(_MP_RISE_769823641[idx_0_769823641]),
                .FALL(_MP_FALL_769823641[idx_0_769823641])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_769823641]),
                .out(M_io_button_edge_out[idx_0_769823641])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_1838887373 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_1838887373 = 5'h14;
    localparam _MP_NUM_SYNC_1838887373 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_1838887373;
    
    generate
        for (idx_0_1838887373 = 0; idx_0_1838887373 < 5; idx_0_1838887373 = idx_0_1838887373 + 1) begin: forLoop_idx_0_1838887373
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1838887373[idx_0_1838887373]),
                .MIN_DELAY(_MP_MIN_DELAY_1838887373),
                .NUM_SYNC(_MP_NUM_SYNC_1838887373)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_1838887373]),
                .out(M_io_button_cond_out[idx_0_1838887373])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_200016027 = 1'h1;
    localparam _MP_FALL_200016027 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_200016027),
        .FALL(_MP_FALL_200016027)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    logic [31:0] D_current_value_d, D_current_value_q = 1'h0;
    logic [4:0] D_counter_d, D_counter_q = 0;
    logic [2:0] D_states_d, D_states_q = 3'h0;
    logic [2:0] D_manual_states_d, D_manual_states_q = 3'h0;
    logic [2:0] D_manual_states_counter_d, D_manual_states_counter_q = 0;
    logic [15:0] D_alu_a_1_d, D_alu_a_1_q = 0;
    logic [15:0] D_alu_a_2_d, D_alu_a_2_q = 0;
    logic [15:0] D_alu_b_1_d, D_alu_b_1_q = 0;
    logic [15:0] D_alu_b_2_d, D_alu_b_2_q = 0;
    logic [5:0] D_alu_opc_d, D_alu_opc_q = 0;
    logic [31:0] D_result_checker_d, D_result_checker_q = 0;
    logic [0:0] D_z_d, D_z_q = 0;
    logic [0:0] D_v_d, D_v_q = 0;
    logic [0:0] D_n_d, D_n_q = 0;
    logic [31:0] D_slow_clock_counter_d, D_slow_clock_counter_q = 0;
    logic [4:0] D_speed_pointer_d, D_speed_pointer_q = 5'h1c;
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 1'h0;
    always @* begin
        D_result_checker_d = D_result_checker_q;
        D_alu_a_1_d = D_alu_a_1_q;
        D_alu_a_2_d = D_alu_a_2_q;
        D_alu_b_1_d = D_alu_b_1_q;
        D_alu_b_2_d = D_alu_b_2_q;
        D_alu_opc_d = D_alu_opc_q;
        D_counter_d = D_counter_q;
        D_current_value_d = D_current_value_q;
        D_manual_states_d = D_manual_states_q;
        D_v_d = D_v_q;
        D_slow_clock_counter_d = D_slow_clock_counter_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_z_d = D_z_q;
        D_n_d = D_n_q;
        D_manual_states_counter_d = D_manual_states_counter_q;
        D_states_d = D_states_q;
        
        flipped = 1'h0;
        D_result_checker_d = D_result_checker_q;
        D_alu_a_1_d = D_alu_a_1_q;
        D_alu_a_2_d = D_alu_a_2_q;
        D_alu_b_1_d = D_alu_b_1_q;
        D_alu_b_2_d = D_alu_b_2_q;
        D_alu_opc_d = D_alu_opc_q;
        M_alu_test_rom_a_addr = 1'h0;
        M_alu_test_rom_b_addr = 1'h0;
        M_alu_test_rom_alufn_addr = 1'h0;
        M_alu_test_rom_expected_result_addr = 1'h0;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 1'h0;
        io_select = 4'hf;
        M_slow_clock_edge_in = 1'h0;
        led = 8'h0;
        M_io_button_cond_in = io_button[3'h4:1'h0];
        M_io_button_edge_in = M_io_button_cond_out;
        D_counter_d = D_counter_q;
        rom_addr = D_counter_q;
        D_current_value_d = D_current_value_q;
        D_manual_states_d = D_manual_states_q;
        D_v_d = D_v_q;
        D_slow_clock_counter_d = D_slow_clock_counter_q + 1'h1;
        D_speed_pointer_d = D_speed_pointer_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        slow_clock = D_slow_clock_counter_q[D_speed_pointer_q];
        M_slow_clock_edge_in = slow_clock;
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slow_clock;
            end
        endcase
        io_led = {D_current_value_q[5'h17:5'h10], D_current_value_q[4'hf:4'h8], D_current_value_q[3'h7:1'h0]};
        led[1'h0] = D_z_q;
        led[1'h1] = D_v_q;
        led[2'h2] = D_n_q;
        
        case (D_manual_states_q)
            3'h0: begin
                if (M_io_button_edge_out[2'h3] && D_slow_clock_enable_q) begin
                    D_z_d = 1'h0;
                    D_v_d = 1'h0;
                    D_n_d = 1'h0;
                    if (D_manual_states_counter_q == 1'h0) begin
                        D_manual_states_d = 3'h1;
                        D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                    end else begin
                        if (D_manual_states_counter_q == 1'h1) begin
                            D_manual_states_d = 3'h2;
                            D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                        end else begin
                            if (D_manual_states_counter_q == 2'h2) begin
                                D_manual_states_d = 3'h3;
                                D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                            end else begin
                                if (D_manual_states_counter_q == 2'h3) begin
                                    D_manual_states_d = 3'h4;
                                    D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                                end else begin
                                    if (D_manual_states_counter_q == 3'h4) begin
                                        D_manual_states_d = 3'h5;
                                        D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                                    end else begin
                                        if (D_manual_states_counter_q == 3'h5) begin
                                            D_manual_states_d = 3'h6;
                                            D_manual_states_counter_d = D_manual_states_counter_q + 1'h1;
                                        end else begin
                                            if (D_manual_states_counter_q == 3'h6) begin
                                                D_manual_states_d = 3'h7;
                                                D_manual_states_counter_d = 1'h0;
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'h1: begin
                if (M_slow_clock_edge_out) begin
                    D_alu_a_1_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_current_value_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_manual_states_d = 3'h0;
                end
            end
            3'h2: begin
                if (M_slow_clock_edge_out) begin
                    D_alu_a_2_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_current_value_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_manual_states_d = 3'h0;
                end
            end
            3'h3: begin
                if (M_slow_clock_edge_out) begin
                    D_alu_b_1_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_current_value_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_manual_states_d = 3'h0;
                end
            end
            3'h4: begin
                if (M_slow_clock_edge_out) begin
                    D_alu_b_2_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_current_value_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_manual_states_d = 3'h0;
                end
            end
            3'h5: begin
                if (M_slow_clock_edge_out) begin
                    D_alu_opc_d = io_dip[1'h0];
                    D_current_value_d = io_dip[1'h0];
                    D_manual_states_d = 3'h0;
                end
            end
            3'h6: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_a = {D_alu_a_1_q, D_alu_a_2_q};
                    M_alu_b = {D_alu_b_1_q, D_alu_b_2_q};
                    M_alu_alufn = D_alu_opc_q;
                    D_current_value_d = {8'h0, M_alu_out[5'h1f:5'h18], M_alu_out[5'h17:5'h10]};
                    D_manual_states_d = 3'h0;
                end
            end
            3'h7: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_a = {D_alu_a_1_q, D_alu_a_2_q};
                    M_alu_b = {D_alu_b_1_q, D_alu_b_2_q};
                    M_alu_alufn = D_alu_opc_q;
                    D_current_value_d = {8'h0, M_alu_out[4'hf:4'h8], M_alu_out[3'h7:1'h0]};
                    D_z_d = M_alu_z;
                    D_v_d = M_alu_v;
                    D_n_d = M_alu_n;
                    D_manual_states_d = 3'h0;
                end
            end
        endcase
        
        case (D_states_q)
            3'h0: begin
                if (M_io_button_edge_out[1'h1] && ~M_slow_clock_edge_out && ~D_slow_clock_enable_q) begin
                    D_slow_clock_enable_d = 1'h1;
                    D_z_d = 1'h0;
                    D_v_d = 1'h0;
                    D_n_d = 1'h0;
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[3'h4] && D_slow_clock_enable_q) begin
                        if (D_counter_q < 6'h20) begin
                            D_counter_d = D_counter_q + 1'h1;
                            D_z_d = 1'h0;
                            D_v_d = 1'h0;
                            D_n_d = 1'h0;
                            D_states_d = 3'h1;
                        end else begin
                            D_counter_d = 1'h0;
                            D_z_d = 1'h0;
                            D_v_d = 1'h0;
                            D_n_d = 1'h0;
                            D_states_d = 3'h1;
                        end
                    end else begin
                        if (M_io_button_edge_out[2'h2] && D_slow_clock_enable_q) begin
                            D_manual_states_d = 3'h0;
                        end
                    end
                end
            end
            3'h1: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_test_rom_a_addr = rom_addr;
                    D_current_value_d = M_alu_test_rom_a_data;
                    D_states_d = 3'h2;
                end
            end
            3'h2: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_test_rom_b_addr = rom_addr;
                    D_current_value_d = M_alu_test_rom_b_data;
                    D_states_d = 3'h3;
                end
            end
            3'h3: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_test_rom_alufn_addr = rom_addr;
                    D_current_value_d = M_alu_test_rom_alufn_data;
                    D_states_d = 3'h4;
                end
            end
            3'h4: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_test_rom_a_addr = rom_addr;
                    M_alu_test_rom_b_addr = rom_addr;
                    M_alu_test_rom_alufn_addr = rom_addr;
                    M_alu_a = M_alu_test_rom_a_data;
                    M_alu_b = M_alu_test_rom_b_data;
                    M_alu_alufn = M_alu_test_rom_alufn_data;
                    D_current_value_d = M_alu_out;
                    D_z_d = M_alu_z;
                    D_v_d = M_alu_v;
                    D_n_d = M_alu_n;
                    if (io_dip[2'h2][3'h7] == 1'h1) begin
                        flipped = ~D_current_value_q[1'h0];
                        D_current_value_d[1'h0] = flipped;
                    end
                    D_states_d = 3'h5;
                end
            end
            3'h5: begin
                if (M_slow_clock_edge_out) begin
                    M_alu_test_rom_expected_result_addr = rom_addr;
                    M_alu_test_rom_a_addr = rom_addr;
                    M_alu_test_rom_b_addr = rom_addr;
                    M_alu_test_rom_alufn_addr = rom_addr;
                    M_alu_a = M_alu_test_rom_a_data;
                    M_alu_b = M_alu_test_rom_b_data;
                    M_alu_alufn = M_alu_test_rom_alufn_data;
                    D_z_d = M_alu_z;
                    D_v_d = M_alu_v;
                    D_n_d = M_alu_n;
                    if (D_current_value_q == M_alu_test_rom_expected_result_data) begin
                        D_current_value_d = 32'hffffffff;
                    end else begin
                        D_current_value_d = 24'hfff000;
                    end
                    D_states_d = 3'h0;
                end
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_current_value_q <= 1'h0;
            D_counter_q <= 0;
            D_states_q <= 3'h0;
            D_manual_states_q <= 3'h0;
            D_manual_states_counter_q <= 0;
            D_alu_a_1_q <= 0;
            D_alu_a_2_q <= 0;
            D_alu_b_1_q <= 0;
            D_alu_b_2_q <= 0;
            D_alu_opc_q <= 0;
            D_result_checker_q <= 0;
            D_z_q <= 0;
            D_v_q <= 0;
            D_n_q <= 0;
            D_slow_clock_counter_q <= 0;
            D_speed_pointer_q <= 5'h1c;
            D_slow_clock_enable_q <= 1'h0;
        end else begin
            D_current_value_q <= D_current_value_d;
            D_counter_q <= D_counter_d;
            D_states_q <= D_states_d;
            D_manual_states_q <= D_manual_states_d;
            D_manual_states_counter_q <= D_manual_states_counter_d;
            D_alu_a_1_q <= D_alu_a_1_d;
            D_alu_a_2_q <= D_alu_a_2_d;
            D_alu_b_1_q <= D_alu_b_1_d;
            D_alu_b_2_q <= D_alu_b_2_d;
            D_alu_opc_q <= D_alu_opc_d;
            D_result_checker_q <= D_result_checker_d;
            D_z_q <= D_z_d;
            D_v_q <= D_v_d;
            D_n_q <= D_n_d;
            D_slow_clock_counter_q <= D_slow_clock_counter_d;
            D_speed_pointer_q <= D_speed_pointer_d;
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
        end
    end
endmodule