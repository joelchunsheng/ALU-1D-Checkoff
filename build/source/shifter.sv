/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_7c93ac9c_i;
    logic [31:0] RR_7c93ac9c_i;
    logic [31:0] R_17e5d29e_i;
    logic [31:0] RR_17e5d29e_i;
    logic [31:0] R_62288915_i;
    logic [31:0] RR_62288915_i;
    logic [31:0] M_mux_a_s0;
    logic [31:0][1:0] M_mux_a_in;
    logic [31:0] M_mux_a_out;
    
    genvar idx_0_1442380722;
    
    generate
        for (idx_0_1442380722 = 0; idx_0_1442380722 < 32; idx_0_1442380722 = idx_0_1442380722 + 1) begin: forLoop_idx_0_1442380722
            mux_2 mux_a (
                .s0(M_mux_a_s0[idx_0_1442380722]),
                .in(M_mux_a_in[idx_0_1442380722]),
                .out(M_mux_a_out[idx_0_1442380722])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux_shl_s0;
    logic [31:0][1:0] M_mux_shl_in;
    logic [31:0] M_mux_shl_out;
    
    genvar idx_0_34368425;
    
    generate
        for (idx_0_34368425 = 0; idx_0_34368425 < 32; idx_0_34368425 = idx_0_34368425 + 1) begin: forLoop_idx_0_34368425
            mux_2 mux_shl (
                .s0(M_mux_shl_s0[idx_0_34368425]),
                .in(M_mux_shl_in[idx_0_34368425]),
                .out(M_mux_shl_out[idx_0_34368425])
            );
        end
    endgenerate
    
    
    logic M_mux_gnd_s0;
    logic [1:0] M_mux_gnd_in;
    logic M_mux_gnd_out;
    
    mux_2 mux_gnd (
        .s0(M_mux_gnd_s0),
        .in(M_mux_gnd_in),
        .out(M_mux_gnd_out)
    );
    
    
    localparam _MP_SIZE_1434968332 = 6'h20;
    logic [31:0] M_bit_reverse_start_in;
    logic [31:0] M_bit_reverse_start_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_1434968332)
    ) bit_reverse_start (
        .in(M_bit_reverse_start_in),
        .reversed(M_bit_reverse_start_reversed)
    );
    
    
    localparam _MP_SIZE_953730674 = 6'h20;
    logic [31:0] M_bit_reverse_end_in;
    logic [31:0] M_bit_reverse_end_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_953730674)
    ) bit_reverse_end (
        .in(M_bit_reverse_end_in),
        .reversed(M_bit_reverse_end_reversed)
    );
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1725532777 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_x_bit_left_shifter_a;
    logic [4:0] M_x_bit_left_shifter_shift;
    logic [4:0] M_x_bit_left_shifter_pad;
    logic [4:0][31:0] M_x_bit_left_shifter_out;
    
    genvar idx_0_1725532777;
    
    generate
        for (idx_0_1725532777 = 0; idx_0_1725532777 < 5; idx_0_1725532777 = idx_0_1725532777 + 1) begin: forLoop_idx_0_1725532777
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_1725532777[idx_0_1725532777])
            ) x_bit_left_shifter (
                .a(M_x_bit_left_shifter_a[idx_0_1725532777]),
                .shift(M_x_bit_left_shifter_shift[idx_0_1725532777]),
                .pad(M_x_bit_left_shifter_pad[idx_0_1725532777]),
                .out(M_x_bit_left_shifter_out[idx_0_1725532777])
            );
        end
    endgenerate
    
    
    always @* begin
        shift = 1'h0;
        M_bit_reverse_start_in = a;
        for (RR_7c93ac9c_i = 0; RR_7c93ac9c_i < 6'h20; RR_7c93ac9c_i = RR_7c93ac9c_i + 1) begin
      R_7c93ac9c_i = (0) + RR_7c93ac9c_i * (1);
            M_mux_a_s0[R_7c93ac9c_i] = alufn[1'h0];
            M_mux_a_in[R_7c93ac9c_i] = {M_bit_reverse_start_reversed[R_7c93ac9c_i], a[R_7c93ac9c_i]};
        end
        M_mux_gnd_s0 = alufn[1'h1];
        M_mux_gnd_in = {1'h0, a[5'h1f]};
        for (RR_17e5d29e_i = 0; RR_17e5d29e_i < 3'h5; RR_17e5d29e_i = RR_17e5d29e_i + 1) begin
      R_17e5d29e_i = (0) + RR_17e5d29e_i * (1);
            if (R_17e5d29e_i == 1'h0) begin
                M_x_bit_left_shifter_a[R_17e5d29e_i] = M_mux_a_out;
            end else begin
                M_x_bit_left_shifter_a[R_17e5d29e_i] = M_x_bit_left_shifter_out[R_17e5d29e_i - 1'h1];
            end
            M_x_bit_left_shifter_shift[R_17e5d29e_i] = b[R_17e5d29e_i];
            M_x_bit_left_shifter_pad[R_17e5d29e_i] = M_mux_gnd_out;
        end
        M_bit_reverse_end_in = M_x_bit_left_shifter_out[3'h4];
        for (RR_62288915_i = 0; RR_62288915_i < 6'h20; RR_62288915_i = RR_62288915_i + 1) begin
      R_62288915_i = (0) + RR_62288915_i * (1);
            M_mux_shl_s0[R_62288915_i] = alufn[1'h0];
            M_mux_shl_in[R_62288915_i][1'h0] = M_x_bit_left_shifter_out[3'h4][R_62288915_i];
            M_mux_shl_in[R_62288915_i][1'h1] = M_bit_reverse_end_reversed[R_62288915_i];
        end
        shift = M_mux_shl_out;
    end
    
    
endmodule