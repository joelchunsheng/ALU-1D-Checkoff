module alu_fsm_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0)  
(
    input clk,             // clock
    input rst,             // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4],
    output led[8]
) {
    // FSM states
    enum States {IDLE, LOAD_A, LOAD_B, LOAD_OPC, EXECUTE, CHECK};
    enum Manual {IDLE, LOAD_A_FIRST, LOAD_A_SECOND, LOAD_B_FIRST, LOAD_B_SECOND, LOAD_OPC, EXECUTE_FIRST, EXECUTE_SECOND}
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 28 // put 8  for sim, 28 for hardware
    const CLK_FREQ1 = $is_sim() ? 1000: 10000000
    
    alu_test_rom_a alu_test_rom_a
    alu_test_rom_b alu_test_rom_b
    alu_test_rom_alufn alu_test_rom_alufn
    alu_test_rom_expected_result alu_test_rom_expected_result
    alu alu

    sig rom_addr[2] // pointer for test case
        
    sig slow_clock
    sig flipped
    
   .clk(clk) {
         edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
         button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ1}}))
         edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        .rst(rst) {
            dff current_value[32](#INIT(0))
            dff counter[2] // counter to loop through test cases
            dff states[$width(States)](#INIT(States.IDLE))
            dff manual_states[$width(Manual)](#INIT(States.IDLE))
            dff manual_states_counter[3]
            
            dff alu_a_1[16]
            dff alu_a_2[16]

            dff alu_b_1[16]
            dff alu_b_2[16]
            
            dff alu_opc[6]
            dff result_checker[32]
            dff z[1]
            dff v[1]
            dff n[1]
            
            
            dff slow_clock_counter[32]
            dff speed_pointer[$clog2(32)](#INIT(SLOW_CLOCK_DEFAULT_SPEED))
            dff slow_clock_enable(#INIT(0))
        }
    }

    // FSM state logic
    always {
        flipped = 0
        result_checker.d = result_checker.q
        alu_a_1.d = alu_a_1.q
        alu_a_2.d = alu_a_2.q
        alu_b_1.d = alu_b_1.q
        alu_b_2.d = alu_b_2.q
        alu_opc.d = alu_opc.q
        alu_test_rom_a.addr = 0;
        alu_test_rom_b.addr = 0;
        alu_test_rom_alufn.addr = 0;
        alu_test_rom_expected_result.addr = 0;
        alu.a = 0;
        alu.b = 0;
        alu.alufn = 0;
        io_led = 3x{{8h00}};
        io_segment = 0
        io_select = 4hF
        slow_clock_edge.in = 0
        led = 8h00
        
        io_button_cond.in = io_button[4:0]
        io_button_edge.in = io_button_cond.out
        
        counter.d = counter.q
        rom_addr = counter.q
        current_value.d = current_value.q
        manual_states.d = manual_states.q
        v.d = v.q
        
        slow_clock_counter.d = slow_clock_counter.q + 1
        speed_pointer.d = speed_pointer.q  // Controls speed of clock/counting
        slow_clock_enable.d = slow_clock_enable.q 
        
        // signal connection
        slow_clock = slow_clock_counter.q[speed_pointer.q] // pointed based on the bit of the counter 
        slow_clock_edge.in =  slow_clock
        
        // this is a mux deciding whether we stop the clock or set it with certain speed 
        case (slow_clock_enable.q){
            0:
                slow_clock_edge.in = 0 // always don't increment or decrement
            1: 
                slow_clock_edge.in =  slow_clock 
        }
        
        //io_led[0] = current_value.q
        io_led = {current_value.q[23:16],current_value.q[15:8],current_value.q[7:0]}
        led[0] = z.q
        led[1] = v.q
        led[2] = n.q
        
        // States for manual tester
        case (manual_states.q){
            Manual.IDLE:
            if(io_button_edge.out[3] && slow_clock_enable.q){
                    z.d = 0
                    v.d = 0
                    n.d = 0
                    if(manual_states_counter.q == 0){ 
                        manual_states.d = Manual.LOAD_A_FIRST
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 1){
                        manual_states.d = Manual.LOAD_A_SECOND
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 2){
                        manual_states.d = Manual.LOAD_B_FIRST
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 3){
                        manual_states.d = Manual.LOAD_B_SECOND
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 4){
                        manual_states.d = Manual.LOAD_OPC
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 5){
                        manual_states.d = Manual.EXECUTE_FIRST
                        manual_states_counter.d = manual_states_counter.q +1
                    }else if(manual_states_counter.q == 6){
                        manual_states.d = Manual.EXECUTE_SECOND
                        manual_states_counter.d = 0
                    }  
                }
            Manual.LOAD_A_FIRST:
                if (slow_clock_edge.out){
                    alu_a_1.d = c{io_dip[1],io_dip[0]}
                    current_value.d = c{io_dip[1],io_dip[0]}
                    manual_states.d = Manual.IDLE
                }
            Manual.LOAD_A_SECOND:
                if (slow_clock_edge.out){
                    alu_a_2.d = c{io_dip[1],io_dip[0]}
                    current_value.d = c{io_dip[1],io_dip[0]}
                    manual_states.d = Manual.IDLE
                }
            Manual.LOAD_B_FIRST:
                if (slow_clock_edge.out){
                    alu_b_1.d = c{io_dip[1],io_dip[0]}
                    current_value.d = c{io_dip[1],io_dip[0]}
                    manual_states.d = Manual.IDLE
                }
            Manual.LOAD_B_SECOND:
                if (slow_clock_edge.out){
                    alu_b_2.d = c{io_dip[1],io_dip[0]}
                    current_value.d = c{io_dip[1],io_dip[0]}
                    manual_states.d = Manual.IDLE
                }
            Manual.LOAD_OPC:
                if (slow_clock_edge.out){
                    alu_opc.d = io_dip[0]
                    current_value.d = io_dip[0]
                    manual_states.d = Manual.IDLE
                }     
            Manual.EXECUTE_FIRST:
                if (slow_clock_edge.out){
                    alu.a = c{alu_a_1.q, alu_a_2.q}
                    alu.b = c{alu_b_1.q, alu_b_2.q}
                    alu.alufn = alu_opc.q
                    current_value.d = c{8x{1b0},alu.out[31:24],alu.out[23:16]}
                    manual_states.d = Manual.IDLE
                }      
            Manual.EXECUTE_SECOND:
                if (slow_clock_edge.out){
                    alu.a = c{alu_a_1.q, alu_a_2.q}
                    alu.b = c{alu_b_1.q, alu_b_2.q}
                    alu.alufn = alu_opc.q
                    current_value.d = c{8x{1b0},alu.out[15:8],alu.out[7:0]}
                    z.d = alu.z
                    v.d = alu.v
                    n.d = alu.n
                    manual_states.d = Manual.IDLE
                }       
        }
        
        // States for auto tester
        case (states.q){
            States.IDLE:
                if(io_button_edge.out[1] && ~slow_clock_edge.out){ 
                    slow_clock_enable.d = 1
                    z.d = 0
                    v.d = 0
                    n.d = 0
                    states.d = States.LOAD_A 
                }
                else if(io_button_edge.out[4] && slow_clock_enable.q){
                    if (counter.q < 4){
                        counter.d = counter.q + 1
                        z.d = 0
                        v.d = 0
                        n.d = 0
                        states.d = States.LOAD_A                           
                    }else{
                        counter.d = 0
                        z.d = 0
                        v.d = 0
                        n.d = 0
                        states.d = States.LOAD_A
                    }

                } 
                else if(io_button_edge.out[2] && slow_clock_enable.q){
                    manual_states.d = Manual.IDLE
                }

            States.LOAD_A:
                if (slow_clock_edge.out){
                    alu_test_rom_a.addr = rom_addr
                    current_value.d = alu_test_rom_a.data
                    states.d = States.LOAD_B
                }
               
            States.LOAD_B: 
                if (slow_clock_edge.out){
                    alu_test_rom_b.addr = rom_addr
                    current_value.d = alu_test_rom_b.data 
                    states.d = States.LOAD_OPC
                }
            States.LOAD_OPC:   
                if (slow_clock_edge.out){              
                    alu_test_rom_alufn.addr = rom_addr
                    current_value.d = alu_test_rom_alufn.data
                    states.d = States.EXECUTE
                }
            
            States.EXECUTE:
                if (slow_clock_edge.out){
                    alu_test_rom_a.addr = rom_addr
                    alu_test_rom_b.addr = rom_addr
                    alu_test_rom_alufn.addr = rom_addr
                    alu.a = alu_test_rom_a.data
                    alu.b = alu_test_rom_b.data
                    alu.alufn = alu_test_rom_alufn.data
                    current_value.d = alu.out
                    z.d = alu.z
                    v.d = alu.v
                    n.d = alu.n
                    // If last switch is flipped
                    if (io_dip[2][7] == 1){
                        flipped = ~current_value.q[0]
                        current_value.d[0] = flipped;
                    }                                        
                    states.d = States.CHECK
                }
            States.CHECK:
                if (slow_clock_edge.out){
                    // get all the data from rom
                    alu_test_rom_expected_result.addr = rom_addr
                    alu_test_rom_a.addr = rom_addr
                    alu_test_rom_b.addr = rom_addr
                    alu_test_rom_alufn.addr = rom_addr
                    
                    // calculate
                    alu.a = alu_test_rom_a.data
                    alu.b = alu_test_rom_b.data
                    alu.alufn = alu_test_rom_alufn.data
                    z.d = alu.z
                    v.d = alu.v
                    n.d = alu.n
                    
                    if (current_value.q == alu_test_rom_expected_result.data){
                        current_value.d = 32x{1b1} // light up all if correct
                    }else{
                        current_value.d = c{12x{1b1} , 12x{1b0}} // light up all if wrong
                    }
                    states.d = States.IDLE
                }   
        }
    }
}